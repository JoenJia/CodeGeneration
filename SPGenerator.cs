using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Schema;
using System.IO;
using System.Xml.Linq;

namespace CodeGeneration
{
    public class SPGenerator
    {
        const string CSharpCallFileName = "AccessBaseExt.cs";
        const string SPSqlFileName = "EntityInsertSPs.sql";
        const string SPSqlComments = @"
-- =============================================
-- This Script is automatically generated by CodeGeneration tool according to FN Database Schema  
-- Generated On : {0}
-- =============================================
";
        const string CSharpHeader = @"
//------------------------------------------------------
// This file is automatically generated from CodeGeneration tool according to the DB Schema.
//------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Xml;
using System.Reflection;
using FirstNational.Net.Common.Utility;
using System.IO;
using FirstNational.Net.API.Delivery.Receive.DAL;
using DB=FirstNational.Net.API.Schema.DB;

namespace FirstNational.Net.API.Delivery.Receive.DAL.SQL
{
    public partial class AccessBase
    {
        private string getEntitySPName<T>(DB.EntityBase<T> entity)
        {
            if (typeof(T) == typeof(DB.Submission.WorkFlow))
            {
                DB.Submission.WorkFlow wf = entity as DB.Submission.WorkFlow;
                if (wf.Resubmissions > 0)
                {
                    return ""spAPIDS_UpdateWorkFlow"";
                }
                else
                {
                    return ""spAPIDS_InsertWorkFlow"";
                }
            }
";
        string _submissionSchemaFile;
        string _utilitySchemaFile;
        string _targetFolder;
        public SPGenerator(string submissionSchemaFile, string utilitySchemaFile, string targetFolder)
        {
            _submissionSchemaFile = submissionSchemaFile;
            _utilitySchemaFile = utilitySchemaFile;
            _targetFolder = targetFolder;
        }
        public void Generate()
        {
            //StreamReader sr = new StreamReader(_submissionSchemaFile); 
            //XmlSchema schemaSubmission = XmlSchema.Read(sr, new ValidationEventHandler(ValidationCallback));
            XNamespace ns = "http://www.w3.org/2001/XMLSchema";
            StreamWriter swCSharp = new StreamWriter(Path.Combine(_targetFolder, CSharpCallFileName));
            swCSharp.WriteLine(CSharpHeader);
            StreamWriter swSQL = new StreamWriter(Path.Combine(_targetFolder, SPSqlFileName));
            XElement schemaDoc = XElement.Load(_submissionSchemaFile);
            bool firstEntity = true;
            foreach (var elm in schemaDoc.Elements(ns + "element"))
            //foreach (XmlSchemaElement elm in schemaSubmission.Elements.Values)
            {
                GenerateSPForTableElement(schemaDoc, elm, swSQL, swCSharp, "Submission", firstEntity);
                firstEntity = false;
            }
            schemaDoc = XElement.Load(_utilitySchemaFile);
            foreach (var elm in schemaDoc.Elements(ns + "element"))
            {
                var tblName = elm.Attribute("name").Value;
                if (tblName == null) continue;
                if (tblName.ToLower() != "actions" 
                    && tblName.ToLower() != "resubmission"
                    && tblName.ToLower() != "b2bcommunicationhistory"
                    && tblName.ToLower() != "underwriternotes"
                    && tblName.ToLower() != "dealstatuslog"
                    )
                {
                    continue;
                }
                GenerateSPForTableElement(schemaDoc, elm, swSQL, swCSharp, "Utility", firstEntity);
            }
            swCSharp.WriteLine("            return null;");
            swCSharp.WriteLine("        }//getEntitySPName");
            swCSharp.WriteLine("    }//class");
            swCSharp.WriteLine("}");
            swSQL.Close();
            swCSharp.Close();
        }
        private void GenerateSPForTableElement(XElement schemaDoc, XElement elm, StreamWriter swSQL, StreamWriter swCSharp, string category, bool firstEntity)
        {
            string indents = "            ";
            XNamespace ns = "http://www.w3.org/2001/XMLSchema";
            var typeName = elm.Attribute("name").Value;
            bool typeSpecified = false;
            if (elm.Attribute("type") != null)
            {
                typeSpecified = true;
                typeName = elm.Attribute("type").Value;
            }
            var tblName = elm.Attribute("name").Value;
            //SP script
            bool resubmissionTable = (tblName.ToLower() == "commitme"
                || tblName.ToLower() == "fncredit"
                || tblName.ToLower() == "fncontrl");
            var spName = string.Format("[dbo].[spAPIDS_Insert{0}]", tblName);
            swSQL.WriteLine(string.Format("IF OBJECT_ID('{0}', 'P') IS NOT NULL DROP PROC {0}", spName));
            swSQL.WriteLine("GO");
            swSQL.WriteLine(string.Format(SPSqlComments, DateTime.Now));
            swSQL.WriteLine(string.Format("CREATE PROC {0}", spName));
            XElement fldsSeq;
            if (typeSpecified)
            {
                var type = (from t in schemaDoc.Descendants(ns + "complexType")
                            where t.Attribute("name")?.Value == typeName
                            select t).FirstOrDefault();
                fldsSeq = type.Element(ns + "sequence");
            }
            else
            {
                fldsSeq = elm.Element(ns + "complexType").Element(ns + "sequence");
            }
            var hasRowGuidField = false;
            List<TableFieldInfo> fields = new List<TableFieldInfo>();
            var firstFld = true;
            foreach (var fldElm in fldsSeq.Elements())
            {
                var fldType = fldElm.Element(ns + "simpleType");
                if (fldType == null)
                {
                    continue;
                }
                TableFieldInfo fldInfo = new TableFieldInfo();
                fldInfo.Name = fldElm.Attribute("name").Value;
                if (fldElm.Attribute("nillable")?.Value == "true"
                    || fldElm.Attribute("minOccurs")?.Value == "0")
                {
                    fldInfo.Nullable = true;
                }
                var fldTypeBase = fldType.Element(ns + "restriction").Attribute("base").Value;
                if (fldTypeBase == "xs:ID")
                {
                    if (fldInfo.Name.ToLower() == "rowguid")
                    {
                        hasRowGuidField = true;
                    }
                    continue; //primary key
                }
                fields.Add(fldInfo);
                var comments = fldElm.Element(ns + "annotation")?.Element(ns + "appinfo")?.Value;
                if (comments == "Not DB Field")
                {
                    fldInfo.NotDBField = true;
                }
                if (firstFld)
                {
                    swSQL.Write("    @");
                    firstFld = false;
                }
                else
                {
                    swSQL.Write("   ,@");
                }
                swSQL.Write(fldElm.Attribute("name").Value);
                swSQL.Write(" ");
                fldInfo.XSDType = fldTypeBase;
                switch (fldTypeBase)
                {
                    case "xs:string":
                        fldInfo.DBType = "nvarchar({0})";
                        var fldLen = fldType.Element(ns + "restriction")?.Element(ns + "maxLength")?.Attribute("value")?.Value;
                        if (fldLen == null || int.Parse(fldLen) >= 1073741823) // == 2147483647 || == 1073741823)
                        {
                            fldLen = "MAX";
                        }
                        fldInfo.DBType = string.Format(fldInfo.DBType, fldLen);
                        break;
                    case "xs:int":
                        fldInfo.DBType = "int";
                        break;
                    case "xs:short":
                        fldInfo.DBType = "smallint";
                        break;
                    case "xs:double":
                        fldInfo.DBType = "float";
                        break;
                    case "xs:decimal":
                        fldInfo.DBType = "decimal";
                        var total = fldType.Element(ns + "restriction")?.Element(ns + "totalDigits")?.Attribute("value")?.Value;
                        var fraction = fldType.Element(ns + "restriction")?.Element(ns + "fractionDigits")?.Attribute("value")?.Value;
                        if (total != null)
                        {
                            fldInfo.DBType = string.Format("decimal({0},{1})", total, fraction);
                        }
                        break;
                    case "xs:dateTime":
                        fldInfo.DBType = "DateTime";
                        break;
                    case "xs:date":
                        fldInfo.DBType = "Date";
                        break;
                    case "xs:boolean":
                        fldInfo.DBType = "Bit";
                        break;
                    case "xs:IDREF":
                        fldInfo.DBType = "uniqueidentifier";
                        break;
                    default:
                        fldInfo.DBType = " UnknownType";
                        break;
                }
                swSQL.Write(fldInfo.DBType);
                if (fldInfo.Nullable)
                {
                    swSQL.Write(" = NULL");
                }
                swSQL.WriteLine();
            }
            if (resubmissionTable)
            {
                swSQL.WriteLine("    ,@IsResubmission bit = 0");
            }
            swSQL.WriteLine("AS");
            swSQL.WriteLine("BEGIN");
            if (hasRowGuidField)
            {
                swSQL.WriteLine(@"	DECLARE @ReturnValues TABLE (  
                                RowGuid   uniqueidentifier
                               )");
            }
            short indentsCnt = 1;
            if (resubmissionTable)
            {
                indentsCnt++;
                swSQL.WriteLine("    IF @IsResubmission = 1 ");
                generateInsertStatements(swSQL, tblName + "AUTO", fields, hasRowGuidField, indentsCnt);
                swSQL.WriteLine("    ELSE ");
            }
            generateInsertStatements(swSQL, tblName, fields, hasRowGuidField, indentsCnt);

            if (hasRowGuidField)
            {
                swSQL.WriteLine("   SELECT * from @ReturnValues");
            }
            swSQL.WriteLine("END");
            swSQL.WriteLine("GO");
            swSQL.WriteLine();
            swSQL.WriteLine();
            //CSharp return SP name
            if (tblName.ToLower() == "workflow")
            {
                return;
            }
            swCSharp.Write(indents);
            swCSharp.Write(string.Format("else if (typeof(T) == typeof(DB.{0}.",category));
            swCSharp.Write(typeName);
            swCSharp.WriteLine("))");
            swCSharp.Write(indents);
            swCSharp.WriteLine("{");
            swCSharp.Write(indents);
            swCSharp.Write("    return \"spAPIDS_Insert");
            swCSharp.Write(tblName);
            swCSharp.WriteLine("\";");
            swCSharp.Write(indents);
            swCSharp.WriteLine("} //if");
        }
        
        private static void generateInsertStatements(StreamWriter swSQL, string tblName, List<TableFieldInfo> fields, bool hasRowGuidField, short indents = 1)
        {
            string indentStr = new string(' ', indents * 4);
            swSQL.WriteLine(string.Format("{0}INSERT INTO [{1}] ", indentStr, tblName));
            swSQL.WriteLine(string.Format("{0}(",indentStr));
            var firstFld = true;
            foreach (var fld in fields)
            {
                if (fld.NotDBField)
                {
                    continue;
                }
                //Applicant.CreditScore is not in database, ignore it
                swSQL.Write(indentStr);
                if (firstFld)
                {
                    swSQL.Write(" ");
                    firstFld = false;
                }
                else
                {
                    swSQL.Write(",");
                }
                swSQL.WriteLine(fld.Name);
            }
            swSQL.WriteLine(string.Format("{0})", indentStr));
            if (hasRowGuidField)
            {
                swSQL.WriteLine(string.Format("{0}OUTPUT Inserted.RowGuid INTO @ReturnValues",indentStr));
            }
            swSQL.WriteLine(string.Format("{0}VALUES(",indentStr));
            firstFld = true;
            foreach (var fld in fields)
            {
                if (fld.NotDBField)
                {
                    continue;
                }
                swSQL.Write(indentStr);
                if (firstFld)
                {
                    swSQL.Write(" ");
                    firstFld = false;
                }
                else
                {
                    swSQL.Write(",");
                }
                swSQL.Write("@");
                swSQL.WriteLine(fld.Name);
            }
            swSQL.WriteLine(string.Format("{0})",indentStr));

        }

        private class TableFieldInfo
        {
            public string Name { get; set; }
            public string XSDType { get; set; }
            public string DBType { get; set; }
            public bool Nullable { get; set; }
            public bool NotDBField { get; set; }
        }
    }
}
